version: "3.8"

services:
  web:
    build:
      context: ./sbm_backend
      dockerfile: Dockerfile.prod
    command: sh -c "uv run python manage.py migrate && uv run python manage.py collectstatic --noinput && uv run gunicorn sbm_backend.wsgi:application -c gunicorn.conf.py"
    volumes:
      - static_volume:/usr/src/sbm_backend/staticfiles
      - media_volume:/usr/src/sbm_backend/media
    expose:
      - 8000
    env_file:
      - ./.env.prod
    depends_on:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  db:
    image: postgres:15.5-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespassword
      - POSTGRES_DB=sbmdb
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgresuser -d sbmdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build: ./nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/usr/src/sbm_backend/staticfiles
      - media_volume:/usr/src/sbm_backend/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - web
    restart: unless-stopped
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  static_volume:
  media_volume:
